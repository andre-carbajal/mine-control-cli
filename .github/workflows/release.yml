name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-jar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Build JAR
        run: mvn package -DskipTests=true

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mine-control-cli-jar
          path: target/*.jar

  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
          - os: windows-latest
            name: windows
          - os: macos-13
            name: macos-x64
          - os: macos-latest
            name: macos-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: "21"
          distribution: "graalvm"
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          native-image-job-reports: "true"

      - name: Configure Maven Memory (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "MAVEN_OPTS=-Xmx4G" >> $GITHUB_ENV

      - name: Build with Maven
        run: mvn -Pnative native:compile -DskipTests=true

      - name: Create OS-specific directory
        shell: bash
        run: |
          mkdir -p target/package
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/*.exe target/package/
            cp target/*.dll target/package/ 2>/dev/null || true
          else
            cp target/mine-control-cli target/package/
          fi

      - name: Create ZIP archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target
          Compress-Archive -Path package\* -DestinationPath mine-control-cli-windows.zip

      - name: Build the Inno Setup Installer
        if: matrix.os == 'windows-latest'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: setup.iss

      - name: Create ZIP archive (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd target
          zip mine-control-cli-${{ matrix.name }}.zip mine-control-cli

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mine-control-cli-${{ matrix.name }}
          path: |
            target/*.zip
            output/*.exe

  release:
    needs: [build-jar, build-native]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.zip
            artifacts/**/*.exe
            artifacts/**/*.jar
          tag_name: ${{ github.ref_name }}
          name: MineControlCli ${{ github.ref_name }}
          body_path: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
